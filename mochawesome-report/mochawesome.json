{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-06T19:39:55.748Z",
    "end": "2023-12-06T19:40:09.258Z",
    "duration": 13510,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b07e2cb0-d23a-4672-9a02-15603fbc85e2",
      "title": "",
      "fullFile": "C:\\Users\\Consultor-02\\Desktop\\Angular course\\selenium\\test\\src\\test\\test.js",
      "file": "\\src\\test\\test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41342f15-3133-4b0f-94b2-60cbafefc5a6",
          "title": "Login and Register tests",
          "fullFile": "C:\\Users\\Consultor-02\\Desktop\\Angular course\\selenium\\test\\src\\test\\test.js",
          "file": "\\src\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register the user successfully",
              "fullTitle": "Login and Register tests should register the user successfully",
              "timedOut": false,
              "duration": 4835,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\ntry {\n  await driver.get(\"https://selenium-test.vercel.app/register\");\n  for (const { id, value } of registerInputsData) {\n    await driver.findElement(By.id(id)).sendKeys(value);\n  }\n  await driver.findElement(By.className(\"session-card__button\")).click();\n  const result = await driver.findElement(By.id(\"swal2-html-container\")).getText();\n  driver.takeScreenshot().then((image) => {\n    fs.writeFile(\"registerTest1.png\", image, \"base64\", (err) => {\n      if (err) console.log(err);\n    });\n  });\n  await driver.actions().keyDown(Key.ESCAPE).perform();\n  const logoutButton = await driver.wait(until.elementLocated(By.id(\"logout-btn\")), 10000);\n  await driver.wait(until.elementIsVisible(logoutButton), 10000);\n  await logoutButton.click();\n  if (result === \"User successfully created\") {\n    assert.strictEqual(\n      result,\n      \"User successfully created\",\n      \"Registration Test Passed! ✅ User was created successfully\"\n    );\n  } else {\n    throw new Error(`Registration Test Failed! ⛔ `);\n  }\n} catch (err) {\n  throw err;\n} finally {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "22d4c117-ad90-45bf-9e82-6b240030610b",
              "parentUUID": "41342f15-3133-4b0f-94b2-60cbafefc5a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not register the user",
              "fullTitle": "Login and Register tests should not register the user",
              "timedOut": false,
              "duration": 3464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://selenium-test.vercel.app/register\");\ntry {\n  for (let i = 0; i < registerFailureInputData.length; i++) {\n    registerFailureInputData[i].forEach(\n      async ({ id, value }) => await driver.findElement(By.id(id)).sendKeys(value)\n    );\n    await driver.findElement(By.className(\"session-card__button\")).click();\n    const result = await driver.findElement(By.id(\"swal2-html-container\")).getText();\n    driver\n      .takeScreenshot()\n      .then((image) => fs.writeFile(\"registerTest2.png\", image, \"base64\", (err) => {}));\n    await driver.actions().keyDown(Key.ESCAPE).perform();\n    if (result !== \"User successfully created\")\n      assert.notEqual(\n        result,\n        \"User successfully created\",\n        `${i + 1}: Registration Test Passed! ✅ user was not created as expected`\n      );\n    else throw new Error(\"Registration Test Failed! ⛔\");\n    registerFailureInputData[i].forEach(\n      async ({ id }) => await driver.findElement(By.id(id)).clear()\n    );\n  }\n} catch (err) {\n  console.log(\"Error in Register test\", err);\n}",
              "err": {},
              "uuid": "a7d15d19-beb8-44a1-92e5-f3cfc2f5e251",
              "parentUUID": "41342f15-3133-4b0f-94b2-60cbafefc5a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login and go to home page",
              "fullTitle": "Login and Register tests should login and go to home page",
              "timedOut": false,
              "duration": 5199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nlet result = \"\";\ntry {\n  await driver.get(\"https://selenium-test.vercel.app/register\");\n  for (const { id, value } of registerInputsData) {\n    await driver.findElement(By.id(id)).sendKeys(value);\n  }\n  await driver.findElement(By.className(\"session-card__button\")).click();\n  const result = await driver.findElement(By.id(\"swal2-html-container\")).getText();\n  await driver.actions().keyDown(Key.ESCAPE).perform();\n  const logoutButton = await driver.wait(until.elementLocated(By.id(\"logout-btn\")), 10000);\n  await driver.wait(until.elementIsVisible(logoutButton), 10000);\n  await logoutButton.click();\n  await driver.findElement(By.id(loginInputsData[0].id)).sendKeys(loginInputsData[0].value);\n  await driver.findElement(By.id(loginInputsData[1].id)).sendKeys(loginInputsData[1].value);\n  await driver.findElement(By.className(\"session-card__button\")).click();\n  const modal = await driver.findElement(By.id(\"swal2-html-container\"));\n  if (modal) {\n    result = await modal.getText();\n  }\n  switch (result) {\n    case \"Username or password invalid\":\n      throw new Error(\"Login Test Failed! ⛔ Username or password invalid\");\n    case \"Password is required\":\n      throw new Error(\"Login Test Failed! ⛔ Password is required\");\n    case \"Username is required\":\n      throw new Error(\"Login Test Failed! ⛔ Username is required\");\n  }\n} catch (err) {\n  if (err.name === \"NoSuchElementError\") {\n    assert.equal(result, \"\", \"Login Test Passed! ✅\");\n    driver\n      .takeScreenshot()\n      .then((image) => fs.writeFile(\"loginTest.png\", image, \"base64\", (err) => {}));\n    return;\n  }\n  throw err;\n} finally {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "f2ed2986-7ce6-4c49-a33b-e7ee393e12e5",
              "parentUUID": "41342f15-3133-4b0f-94b2-60cbafefc5a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22d4c117-ad90-45bf-9e82-6b240030610b",
            "a7d15d19-beb8-44a1-92e5-f3cfc2f5e251",
            "f2ed2986-7ce6-4c49-a33b-e7ee393e12e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13498,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}